% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotting.R
\docType{methods}
\name{plotPCA}
\alias{plotPCA}
\alias{plotPCASCE}
\alias{plotPCA,SingleCellExperiment-method}
\alias{plotPCA,SingleCellExperiment-method}
\alias{plotPCA}
\title{Plot PCA for a SingleCellExperiment object}
\usage{
plotPCASCE(object, ..., return_SCE = FALSE, draw_plot = TRUE,
  rerun = FALSE, ncomponents = 2, run_args = list())

\S4method{plotPCA}{SingleCellExperiment}(object, ..., return_SCE = FALSE,
  draw_plot = TRUE, rerun = FALSE, ncomponents = 2, run_args = list())
}
\arguments{
\item{object}{a \code{\link{SingleCellExperiment}} object}

\item{...}{Additional arguments to pass to \code{\link{plotReducedDim}}.}

\item{return_SCE}{logical, should the function return a \code{SingleCellExperiment}
object with principal component values for cells in the
\code{reducedDim} slot. Default is \code{FALSE}, in which case a
\code{ggplot} object is returned.}

\item{draw_plot}{logical, should the plot be drawn on the current graphics
device? Only used if \code{return_SCE} is \code{TRUE}, otherwise the plot
is always produced.}

\item{rerun}{logical, should PCA be recomputed even if \code{object} contains a
\code{"PCA"} element in the \code{reducedDims} slot?}

\item{ncomponents}{numeric scalar indicating the number of principal
components to plot, starting from the first principal component. Default is
2. If \code{ncomponents} is 2, then a scatterplot of PC2 vs PC1 is produced.
If \code{ncomponents} is greater than 2, a pairs plots for the top components
is produced.}

\item{run_args}{Arguments to pass to \code{\link{runPCA}} when \code{rerun=TRUE}
or if there is no existing \code{"PCA"} element in the \code{reducedDims} slot.}
}
\value{
either a ggplot plot object or an SingleCellExperiment object
}
\description{
Produce a principal components analysis (PCA) plot of two or more principal
components for a \code{\link{SingleCellExperiment}} object.
}
\details{
The function \code{\link{prcomp}} is used internally to do the PCA.
The function checks whether the \code{object} has standardised
expression values (by looking at \code{stand_exprs(object)}). If yes, the
existing standardised expression values are used for the PCA. If not, then
standardised expression values are computed using \code{\link{scale}} (with
feature-wise unit variances or not according to the \code{scale_features}
argument), added to the object and PCA is done using these new standardised
expression values.

If the arguments \code{detect_outliers} and \code{return_SCE} are both
\code{TRUE}, then the element \code{$outlier} is added to the pData
(phenotype data) slot of the \code{SingleCellExperiment} object. This element contains
indicator values about whether or not each cell has been designated as an
outlier based on the PCA. These values can be accessed for filtering
low quality cells with, for example, \code{example_sce$outlier}.
}
\examples{
## Set up an example SingleCellExperiment
data("sc_example_counts")
data("sc_example_cell_info")
example_sce <- SingleCellExperiment(
assays = list(counts = sc_example_counts), colData = sc_example_cell_info)
example_sce <- normalize(example_sce)

## Examples plotting PC1 and PC2
plotPCA(example_sce)
plotPCA(example_sce, colour_by = "Cell_Cycle")
plotPCA(example_sce, colour_by = "Cell_Cycle", shape_by = "Treatment")
plotPCA(example_sce, colour_by = "Cell_Cycle", shape_by = "Treatment",
size_by = "Mutation_Status")
plotPCA(example_sce, shape_by = "Treatment", size_by = "Mutation_Status")
plotPCA(example_sce, feature_set = 1:100, colour_by = "Treatment",
shape_by = "Mutation_Status")

## experiment with legend
example_subset <- example_sce[, example_sce$Treatment == "treat1"]
plotPCA(example_subset, colour_by = "Cell_Cycle", shape_by = "Treatment", legend = "all")

plotPCA(example_sce, shape_by = "Treatment", return_SCE = TRUE)

## Examples plotting more than 2 PCs
plotPCA(example_sce, ncomponents = 8)
plotPCA(example_sce, ncomponents = 4, colour_by = "Treatment",
shape_by = "Mutation_Status")

}
\seealso{
\code{\link{runPCA}}
}
