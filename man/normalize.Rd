% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/normalizeSCE.R
\docType{methods}
\name{normalize}
\alias{normalize}
\alias{normalizeSCE}
\alias{normalize,SingleCellExperiment-method}
\title{Normalize a SingleCellExperiment object using pre-computed size factors}
\usage{
normalizeSCE(object, exprs_values = "counts", return_log = TRUE,
  log_exprs_offset = NULL, centre_size_factors = TRUE,
  preserve_zeroes = FALSE)

\S4method{normalize}{SingleCellExperiment}(object,
  exprs_values = "counts", return_log = TRUE,
  log_exprs_offset = NULL, centre_size_factors = TRUE,
  preserve_zeroes = FALSE)
}
\arguments{
\item{object}{A SingleCellExperiment object.}

\item{exprs_values}{String indicating which assay contains the count data that should be used to compute log-transformed expression values.}

\item{return_log}{Logical scalar, should normalized values be returned on the log2 scale?
If \code{TRUE}, output is stored as \code{"logcounts"} in the returned object; if \code{FALSE} output is stored as \code{"normcounts"}.}

\item{log_exprs_offset}{Numeric scalar specifying the pseudo-count to add when log-transforming expression values.
If \code{NULL}, the value is taken from \code{metadata(object)$log.exprs.offset} if defined, otherwise it is set to 1.}

\item{centre_size_factors}{Logical scalar indicating whether size fators should be centred.}

\item{preserve_zeroes}{Logical scalar indicating whether zeroes should be preserved when dealing with non-unity offsets.}
}
\value{
A SingleCellExperiment object containing normalized expression values in \code{"normcounts"} if \code{log=FALSE},
and log-normalized expression values in \code{"logcounts"} if \code{log=TRUE}.
All size factors will also be centred in the output object if \code{centre_size_factors=TRUE}.
}
\description{
Compute normalized expression values from count data in a SingleCellExperiment object, using the size factors stored in the object.
}
\details{
Normalized expression values are computed by dividing the counts for each cell by the size factor for that cell.
This aims to remove cell-specific scaling biases, e.g., due to differences in sequencing coverage or capture efficiency.
If \code{log=TRUE}, log-normalized values are calculated by adding \code{log_exprs_offset} to the normalized count and performing a log2 transformation.

Features marked as spike-in controls will be normalized with control-specific size factors, if these are available.
This reflects the fact that spike-in controls are subject to different biases than those that are removed by gene-specific size factors (namely, total RNA content).
If size factors for a particular spike-in set are not available, a warning will be raised.

If \code{centre_size_factors=TRUE}, all sets of size factors will be centred to have the same mean prior to calculation of normalized expression values.
This ensures that abundances are roughly comparable between features normalized with different sets of size factors.
By default, the centre mean is unity, which means that the computed \code{exprs} can be interpreted as being on the same scale as log-counts.
It also means that the added \code{log_exprs_offset} can be interpreted as a pseudo-count (i.e., on the same scale as the counts).

If \code{preserve_zeroes=TRUE} and the pseudo-count is not unity, size factors are instead centered at the specified value of \code{log_exprs_offset}.
The log-transformation is then performed on the normalized expression values with a pseudo-count of 1, which ensures that zeroes remain so in the output matrix.
This yields the same results as \code{preserve_zeroes=FALSE} minus a matrix-wide constant of \code{log2(log_exprs_offset)}.
}
\examples{
data("sc_example_counts")
data("sc_example_cell_info")
example_sce <- SingleCellExperiment(
    assays = list(counts = sc_example_counts),
    colData = sc_example_cell_info
)

example_sce <- normalize(example_sce)

}
\author{
Davis McCarthy and Aaron Lun
}
