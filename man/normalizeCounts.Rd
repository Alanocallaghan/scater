% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/normalizeCounts.R
\docType{methods}
\name{normalizeCounts}
\alias{normalizeCounts}
\alias{normalizeCounts,ANY-method}
\alias{normalizeCounts,SummarizedExperiment-method}
\alias{normalizeCounts,SingleCellExperiment-method}
\title{Compute normalized expression values}
\usage{
normalizeCounts(x, ...)

\S4method{normalizeCounts}{ANY}(x, size_factors = NULL,
  use_size_factors = NULL, log = TRUE, return_log = NULL,
  pseudo_count = 1, log_exprs_offset = NULL,
  center_size_factors = TRUE, subset_row = NULL, downsample = FALSE,
  down_target = NULL, down_prop = 0.01)

\S4method{normalizeCounts}{SummarizedExperiment}(x, ...,
  exprs_values = "counts")

\S4method{normalizeCounts}{SingleCellExperiment}(x, size_factors = NULL,
  ...)
}
\arguments{
\item{x}{A numeric matrix-like object containing counts for cells in the columns and features in the rows.

Alternatively, a \linkS4class{SingleCellExperiment} or \linkS4class{SummarizedExperiment} object containing such a count matrix.}

\item{...}{For the generic, arguments to pass to specific methods.

For the SummarizedExperiment method, further arguments to pass to the ANY or \linkS4class{DelayedMatrix} methods.

For the SingleCellExperiment method, further arguments to pass to the SummarizedExperiment method.}

\item{size_factors}{A numeric vector of cell-specific size factors.
Alternatively \code{NULL}, in which case the size factors are extracted or computed from \code{x}.}

\item{use_size_factors}{Deprecated, same as \code{size_factors}.}

\item{log}{Logical scalar indicating whether normalized values should be log2-transformed.}

\item{return_log}{Deprecated, same as \code{log}.}

\item{pseudo_count}{Numeric scalar specifying the pseudo_count to add when log-transforming expression values.}

\item{log_exprs_offset}{Deprecated, same as \code{pseudo_count}.}

\item{center_size_factors}{Logical scalar indicating whether size factors should be centered at unity before being used.}

\item{subset_row}{A vector specifying the subset of rows of \code{x} for which to return a result.}

\item{downsample}{Logical scalar indicating whether downsampling should be performed prior to scaling and log-transformation.}

\item{down_target}{Numeric scalar specifying the downsampling target when \code{downsample=TRUE}.
If \code{NULL}, this is defined by \code{down_prop} and a warning is emitted.}

\item{down_prop}{Numeric scalar between 0 and 1 indicating the quantile to use to define the downsampling target when \code{downsample=TRUE}.}

\item{exprs_values}{A string or integer scalar specifying the assay of \code{x} containing the count matrix.}
}
\value{
A matrix-like object of (log-)normalized expression values.
}
\description{
Compute (log-)normalized expression values by dividing counts for each cell by the corresponding size factor.
}
\details{
Normalized expression values are computed by dividing the counts for each cell by the size factor for that cell.
This aims to remove cell-specific scaling biases, e.g., due to differences in sequencing coverage or capture efficiency.
If \code{log=TRUE}, log-normalized values are calculated by adding \code{pseudo_count} to the normalized count and performing a log2 transformation.

If no size factors are supplied, they are determined automatically from \code{x}:
\itemize{
\item For count matrices and \linkS4class{SummarizedExperiment} inputs,
the sum of counts for each cell is used to compute a size factor via the \code{\link{librarySizeFactors}} function.
\item For \linkS4class{SingleCellExperiment} instances, the function searches for \code{\link{sizeFactors}} from \code{x}.
If none are available, it defaults to library size-derived size factors.
}
If \code{size_factors} are supplied, they will override any size factors present in \code{x}.

If \code{center_size_factors=TRUE}, size factors are centred at unity prior to calculation of normalized expression values.
This means that the computed expression values can be interpreted as being on the same scale as log-counts,
and that the value of \code{pseudo_count} can be interpreted as being on the same scale as the counts.
It also ensures that abundances are roughly comparable between features normalized with different sets of size factors.
}
\section{Downsampling instead of scaling}{

If \code{downsample=TRUE}, counts for each cell are randomly downsampled according to their size factors prior to log-transformation.
This is occasionally useful for avoiding artifacts caused by scaling count data with a strong mean-variance relationship.
Each cell is downsampled according to the ratio between \code{down_target} and that cell's size factor.
(Cells with size factors below the target are not downsampled and are directly scaled by this ratio.)
If \code{log=TRUE}, a log-transformation is also performed after adding \code{pseudo_count} to the downsampled counts.

Note that the normalized expression values in this mode cannot be interpreted as being on the same abundance as the original counts,
but instead have abundance equivalent to counts after downsampling to the target size factor.
This motivates the use of a fixed \code{down_target} to ensure that expression values are comparable across different \code{normalizeCounts} calls. 
We automatically set \code{down_target} to the 1st percentile of size factors across all cells involved in the analysis,
but this is only appropriate if the resulting expression values are only compared within the same call to \code{normalizeCounts}.
If expression values are to be compared across multiple calls (e.g., in \code{\link[scran]{modelGeneVarWithSpikes}} or \code{\link[batchelor]{multiBatchNorm}}),
\code{down_target} should be manually set to a constant target value that can be considered a low size factor in every call.
}

\examples{
example_sce <- mockSCE()
normed <- normalizeCounts(example_sce)
str(normed)
}
\seealso{
\code{\link{logNormCounts}}, which wraps this function for convenient use with SingleCellExperiment instances.

\code{\link[DropletUtils]{downsampleMatrix}}, to perform the downsampling.
}
\author{
Aaron Lun
}
