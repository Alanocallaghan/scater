% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/sumCountsAcrossCells.R
\name{sumCountsAcrossCells}
\alias{sumCountsAcrossCells}
\alias{aggregateAcrossCells}
\alias{sumCountsAcrossCells,ANY-method}
\alias{sumCountsAcrossCells,SummarizedExperiment-method}
\alias{aggregateAcrossCells,SummarizedExperiment-method}
\alias{aggregateAcrossCells,SingleCellExperiment-method}
\title{Sum counts across sets of cells}
\usage{
sumCountsAcrossCells(x, ...)

aggregateAcrossCells(x, ...)

\S4method{sumCountsAcrossCells}{ANY}(
  x,
  ids,
  subset_row = NULL,
  subset_col = NULL,
  average = FALSE,
  BPPARAM = SerialParam()
)

\S4method{sumCountsAcrossCells}{SummarizedExperiment}(x, ..., exprs_values = "counts")

\S4method{aggregateAcrossCells}{SummarizedExperiment}(
  x,
  ids,
  ...,
  coldata_merge = NULL,
  use_exprs_values = "counts"
)

\S4method{aggregateAcrossCells}{SingleCellExperiment}(
  x,
  ids,
  ...,
  subset_row = NULL,
  coldata_merge = NULL,
  use_exprs_values = "counts",
  use_altexps = TRUE
)
}
\arguments{
\item{x}{For \code{sumCountsAcrossCells}, a numeric matrix of counts containing features in rows and cells in columns.
Alternatively, a \linkS4class{SummarizedExperiment} object containing such a count matrix.

For \code{aggregateAcrossCells}, a \linkS4class{SingleCellExperiment} or SummarizedExperiment containing a count matrix.}

\item{...}{For the generics, further arguments to be passed to specific methods.

For the \code{sumCountsAcrossCells} SummarizedExperiment method, further arguments to be passed to the ANY method.

For \code{aggregateAcrossCells}, further arguments to be passed to \code{sumCountsAcrossCells}.}

\item{ids}{A factor specifying the set to which each cell in \code{x} belongs.

Alternatively, a \linkS4class{DataFrame} of such vectors or factors, in which case each unique combination of levels defines a set.}

\item{subset_row}{An integer, logical or character vector specifying the features to use.
Defaults to all features.

For the \linkS4class{SingleCellExperiment} method, this argument will not affect alternative Experiments,
where summation is always performed for all features (or not at all, depending on \code{use_alt_exps}).}

\item{subset_col}{An in teger, logical or character vector specifying the cells to use.
Defaults to all cells with non-\code{NA} entries of \code{ids}.}

\item{average}{Logical scalar indicating whether the average should be computed instead of the sum.}

\item{BPPARAM}{A \linkS4class{BiocParallelParam} object specifying whether summation should be parallelized.}

\item{exprs_values}{A string or integer scalar specifying the assay of \code{x} containing the matrix of counts
(or any other expression quantity that can be meaningfully summed).}

\item{coldata_merge}{A named list of functions specifying how each column metadata field should be aggregated.
For any unspecified field, metadata is retained for the first instance of a cell from each set in \code{ids}.
If \code{NULL}, the first instance is retained for all fields.}

\item{use_exprs_values}{A character or integer vector specifying the assay(s) of \code{x} containing count matrices.}

\item{use_altexps}{Logical scalar indicating whether aggregation should be performed for alternative experiments in \code{x}.

Alternatively, a character vector specifying the names of the alternative experiments to be aggregated.}
}
\value{
For \code{sumCountsAcrossCells} with a factor \code{ids}, a count matrix is returned with one column per level of \code{ids}.
For each feature, counts for all cells in the same set are summed together.
Columns are ordered by \code{levels(ids)}.

For \code{sumCountsAcrossCells} with a DataFrame \code{ids}, a SummarizedExperiment is returned containing a similar count matrix in the first assay.
Each column corresponds to a unique combination of levels in \code{ids} and contains the sum of counts for all cells with that combination.
The identities of the levels for each column are reported in the \code{\link{colData}}.

For \code{aggregateAcrossCells}, a SummarizedExperiment of the same class as \code{x} is returned,
containing summed matrices generated by \code{sumCountsAcrossCell} on all assays specified by \code{use_exprs_values}.
By default, column metadata is retained for the first instance of a cell from each set in \code{ids},
but this behavior can be customized by supplying appropriate functions to \code{coldata_merge}.
If \code{ids} is a DataFrame, the combination of levels corresponding to each column is also reported in the column metadata.
}
\description{
Sum together expression values (by default, counts) for each set of cells and for each feature.
}
\details{
This function provides a convenient method for aggregating counts across multiple columns for each feature.
A typical application would be to sum counts across all cells in each cluster to obtain \dQuote{pseudo-bulk} samples for further analysis.

The behaviour of this function is equivalent to that of \code{\link{colsum}}.
However, this function can operate on any matrix representation in \code{object};
can do so in a parallelized manner for large matrices without resorting to block processing;
and can natively support combinations of multiple factors in \code{ids}.

Any \code{NA} values in \code{ids} are implicitly ignored and will not be considered during summation.
This may be useful, e.g., to remove undesirable cells by setting their entries in \code{ids} to \code{NA}.
Alternatively, we can explicitly select the cells of interest with \code{subset_col}.

Setting \code{average=TRUE} will compute the average in each set rather than the sum.
This is particularly useful if \code{x} contains expression values that have already been normalized in some manner,
as computing the average avoids another round of normalization to account for differences in the size of each set.
}
\examples{
example_sce <- mockSCE()
ids <- sample(LETTERS[1:5], ncol(example_sce), replace=TRUE)

out <- sumCountsAcrossCells(example_sce, ids)
head(out)

batches <- sample(1:3, ncol(example_sce), replace=TRUE)
out2 <- sumCountsAcrossCells(example_sce, 
      DataFrame(label=ids, batch=batches))
out2

# Using another column metadata merge strategy.
example_sce$stuff <- runif(ncol(example_sce))
example_merged <- aggregateAcrossCells(example_sce, ids, 
     coldata_merge=list(stuff=sum))
}
\author{
Aaron Lun
}
