% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/sumCountsAcrossCells.R
\docType{methods}
\name{sumCountsAcrossCells}
\alias{sumCountsAcrossCells}
\alias{aggregateAcrossCells}
\alias{sumCountsAcrossCells,ANY-method}
\alias{sumCountsAcrossCells,SummarizedExperiment-method}
\alias{aggregateAcrossCells,SummarizedExperiment-method}
\alias{aggregateAcrossCells,SingleCellExperiment-method}
\title{Sum counts across a set of cells}
\usage{
sumCountsAcrossCells(x, ...)

aggregateAcrossCells(x, ...)

\S4method{sumCountsAcrossCells}{ANY}(x, ids, BPPARAM = SerialParam())

\S4method{sumCountsAcrossCells}{SummarizedExperiment}(x, ...,
  exprs_values = "counts")

\S4method{aggregateAcrossCells}{SummarizedExperiment}(x, ids, ...,
  use_exprs_values = "counts")

\S4method{aggregateAcrossCells}{SingleCellExperiment}(x, ids, ...,
  use_exprs_values = "counts", use_altexps = TRUE)
}
\arguments{
\item{x}{For \code{sumCountsAcrossCells}, a numeric matrix of counts containing features in rows and cells in columns.
Alternatively, a \linkS4class{SummarizedExperiment} object containing such a count matrix.

For \code{aggregateAcrossCells}, a \linkS4class{SingleCellExperiment} or SummarizedExperiment containing a count matrix.}

\item{...}{For the generics, further arguments to be passed to specific methods.

For the \code{sumCountsAcrossCells} SummarizedExperiment method, further arguments to be passed to the ANY method.

For \code{aggregateAcrossCells}, further arguments to be passed to \code{sumCountsAcrossCells}.}

\item{ids}{A factor specifying the set to which each cell in \code{x} belongs.}

\item{BPPARAM}{A \linkS4class{BiocParallelParam} object specifying whether summation should be parallelized.}

\item{exprs_values}{A string or integer scalar specifying the assay of \code{x} containing the matrix of counts
(or any other expression quantity that can be meaningfully summed).}

\item{use_exprs_values}{A character or integer vector specifying the assay(s) of \code{x} containing count matrices.}

\item{use_altexps}{Logical scalar indicating whether aggregation should be performed for alternative experiments in \code{x}.

Alternatively, a character vector specifying the names of the alternative experiments to be aggregated.}
}
\value{
For \code{sumCountsAcrossCells}, a count matrix is returned with one column per level of \code{ids}.
For each feature, counts for all cells in the same set are summed together.
Columns are ordered by \code{levels(ids)}.

For \code{aggregateAcrossCells}, a SummarizedExperiment of the same class as \code{x} is returned,
containing summed matrices generated by \code{sumCountsAcrossCell} on all assays specified by \code{all_exprs_values}.
Column metadata is retained for the first instance of a cell from each set in \code{ids}.
}
\description{
Create a count matrix where counts for all cells in a set are summed together.
}
\details{
This function provides a convenient method for aggregating counts across multiple columns for each feature.
A typical application would be to sum counts across all cells in each cluster to obtain \dQuote{pseudo-bulk} samples for further analysis.

The behaviour of this function is equivalent to that of \code{\link{colsum}}.
However, this function can operate on any matrix representation in \code{object},
and can do so in a parallelized manner for large matrices without resorting to block processing.

Any \code{NA} values in \code{ids} are implicitly ignored and will not be considered or reported.
This may be useful, e.g., to remove undesirable cells by setting their entries in \code{ids} to \code{NA}.
}
\examples{
data("sc_example_counts")
data("sc_example_cell_info")
example_sce <- SingleCellExperiment(
    assays = list(counts = sc_example_counts), 
    colData = sc_example_cell_info)

ids <- sample(LETTERS[1:5], ncol(example_sce), replace=TRUE)
out <- sumCountsAcrossCells(example_sce, ids)
dimnames(out)
}
\author{
Aaron Lun
}
